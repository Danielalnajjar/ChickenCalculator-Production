spring:
  application:
    name: chicken-calculator
  web:
    resources:
      # Enable static resource handling
      add-mappings: true
      # Define static resource locations
      static-locations:
        - file:/app/static/
        - file:/app/static/admin/
        - file:/app/static/app/
        - classpath:/static/
        - classpath:/public/
      # Cache control for static resources (1 year for better caching)
      cache:
        period: 31536000
  datasource:
    # Use H2 for local development with PostgreSQL compatibility mode
    url: ${DATABASE_URL:jdbc:h2:file:./data/chicken-calculator-db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DB_CLOSE_DELAY=-1}
    driverClassName: ${DATABASE_DRIVER:org.h2.Driver}
    username: ${DATABASE_USERNAME:sa}
    password: ${DATABASE_PASSWORD:}
    # HikariCP connection pool settings - Railway optimized
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:15}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      pool-name: ChickenCalculatorPool
      connection-test-query: SELECT 1
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}
  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:true}
      settings:
        web-allow-others: false
  jpa:
    database-platform: ${DATABASE_PLATFORM:org.hibernate.dialect.H2Dialect}
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: false
  
  # Flyway configuration
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    baseline-version: ${FLYWAY_BASELINE_VERSION:0}
    locations: ${FLYWAY_LOCATIONS:classpath:db/migration}
    validate-on-migrate: ${FLYWAY_VALIDATE_ON_MIGRATE:true}

server:
  port: ${PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

# Actuator for health checks and metrics
management:
  endpoints:
    web:
      exposure:
        include: health,info,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
    prometheus:
      enabled: true
  metrics:
    export:
      # Prometheus metrics configuration
      prometheus:
        enabled: true
        step: 10s
        descriptions: true
      # Enable HikariCP metrics
      simple:
        enabled: true
    # Enable JVM metrics
    enable:
      jvm: true
      system: true
      process: true
      hikaricp: true
      web: true
    # Custom metrics configuration
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[chicken.calculator.calculations]": true
      sla:
        "[http.server.requests]": 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        "[chicken.calculator.calculations]": 10ms, 25ms, 50ms, 100ms, 200ms
    tags:
      application: chicken-calculator
      environment: ${SPRING_PROFILES_ACTIVE:development}

# Sentry Error Tracking Configuration
sentry:
  dsn: ${SENTRY_DSN:}                           # empty => no-op locally
  environment: ${SENTRY_ENVIRONMENT:production}
  release: ${SENTRY_RELEASE:unknown}
  send-default-pii: false                       # don't ship PII by default
  traces-sample-rate: ${SENTRY_TRACES_SAMPLE_RATE:0.10}    # 10% APM sampling
  profiles-sample-rate: ${SENTRY_PROFILES_SAMPLE_RATE:0.01} # 1% profiling
  # Additional Sentry configuration
  attach-stacktrace: true
  attach-threads: true
  enable-shutdown-hook: true
  max-breadcrumbs: 100
  # Integration configuration
  integrations:
    logback:
      enabled: true
      minimum-event-level: error
      minimum-breadcrumb-level: info
    spring:
      enabled: true
    jdbc:
      enabled: true

logging:
  level:
    com.example.chickencalculator: ${LOG_LEVEL:DEBUG}
    com.example.chickencalculator.filter: ${FILTER_LOG_LEVEL:DEBUG}
    com.example.chickencalculator.interceptor: ${INTERCEPTOR_LOG_LEVEL:DEBUG}
    com.example.chickencalculator.exception: ${EXCEPTION_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    io.sentry: ${SENTRY_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-NO_CORRELATION_ID}] %logger{36} - %msg%n"
  config: ${LOGGING_CONFIG:classpath:logback-spring.xml}

---
spring:
  config:
    activate:
      on-profile: dev

server:
  error:
    include-exception: true
    include-message: ALWAYS
    include-stacktrace: ALWAYS

logging:
  level:
    org.springframework.security: TRACE
    org.springframework.web: TRACE
    org.springframework.web.filter: TRACE
    org.springframework.boot.web.servlet.error: TRACE
    com.example.chickencalculator: TRACE